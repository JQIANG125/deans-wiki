[
{
	"uri": "/lab-1/",
	"title": "Lab 1",
	"tags": [],
	"description": "",
	"content": " Requirements Elicitation and Analysis\nDeliverables  Use Cases Functional Requirements \u0026amp; Non-functional Requirements Analysis Models  "
},
{
	"uri": "/lab-1/use-cases/",
	"title": "Use Cases",
	"tags": [],
	"description": "",
	"content": " Revision History    Name Date Reason For Changes Version     \u0026ndash; \u0026ndash; \u0026ndash; 1.0    Use Case Diagram Use Case List    Primary Actor Use Cases     Web User 1.1 View Singapore Real-time Crisis Status In Web Client System   Web User 2.1 Report Crisis Using Crisis Report Form   Public User 2.2 Report Crisis to Call Center Operator   Call Center Operator 2.3 Report Crisis From Public Call   Prime Minister Office 3.1 Receive Singapore Crisis Status Summary Report   Emergency Agencies 3.2 Receive Crisis Intervention Request via SMS   Public User 3.3 Receive Civil Defence Shelter Locations From Facebook and Twitter    Use Case Description 1.1    - -     Use Case ID: 1.1   Use Case Name: View Singapore Real-time Crisis Status In Web Client System   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Web User   Description: Allow Web User to view real-time crisis status of Singapore   Trigger: User enters the Web Client System   Preconditions: Web User has entered the website   Postconditions: Web User is able to view real-time crisis status of Singapore   Normal Flow: 1. User enters the website\n2. Website fetches real-time weather conditions, dengue hotspot information, haze information, emergency situation (reported by user) from API Service System\n3. Website presents the fetched data on a map of Singapore\n4. User may refresh the map to see real time status   Alternative Flows: -   Exceptions: 2a. Website fails to fetch one or more types of data\n1. Website displays successfully fetched data\n2. Website displays message that informs user of which type of data failed to load\n3. User may request fetching again by clicking Retry   Includes: -   Priority: High   Frequency of Use: High   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    2.1    - -     Use Case ID: 2.1   Use Case Name: Report Crisis Using Crisis Report Form   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Web User   Description: Allow Web User to report crisis by submitting forms   Trigger: -   Preconditions: -   Postconditions: User has reported crisis   Normal Flow: 1. User goes to Crisis Report section in Web Client System\n2. User fills in Crisis Report form with name, mobile number, location, type of assistance requested (emergency ambulance, rescue, and evacuation, fire-fighting, gas leak control) and Crisis description\n3. User click submit button\n4. Website validates crisis report form\n5. Website sends Crisis details to API Service System\n6. Website shows confirmation   Alternative Flows: -   Exceptions: 4a. Website fails to validate Crisis Report form due to incompleteness\n1. Website displays message that informs user of incompleteness of content\n2. User may re-fill Crisis Report form\n3. User may re-submit Crisis Report form, return normal flow at step 4\n5a. Website fails to send Crisis Report form to API Service System\n1. Website displays message that informs user of failed submission\n2. User may re-submit crisis report form, return to normal flow at step 4   Includes: -   Priority: High   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    2.2    - -     Use Case ID: 2.2   Use Case Name: Report Crisis to Call Center Operator   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Public User   Description: Allow Public User to report crisis through Call Center Operator   Trigger: -   Preconditions: -   Postconditions: User has reported crisis   Normal Flow: 1. User goes to Crisis Report Page\n2. User looks up phone number for crisis report\n3. User dials the phone number\n4. User reports crisis through Call Center Operator   Alternative Flows: -   Exceptions: -   Includes: -   Priority: High   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    2.3    - -     Use Case ID: 2.3   Use Case Name: Report Crisis From Public Call   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Call Center Operator   Description: Allow Call Center Operator to report crisis received from public call   Trigger: Call Center Operator received crisis report from public call   Preconditions: Call Center Operator has logged in   Postconditions: Call Center Operator has reported crisis   Normal Flow: 1. User goes to Call Center Operation Page\n2. Website authenticates user\n3. Call Center Operator fills in crisis report form (name, mobile number, location, type of assistance requested (emergency ambulance, rescue, and evacuation, fire-fighting, gas leak control)\n4. Website validates crisis report form\n5. Website sends crisis report to API Service System\n6. Website shows confirmation   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n2. User may log in, return to normal flow at step 2\n4a. Website fails to validate crisis report form due to incompleteness\n1. Website displays message that informs user of incomplete form\n2. User may re-fill crisis report form\n3. User may re-submit crisis report form, return to normal flow at step 4\n5a. Website fails to send crisis report to API Service System\n1. Website displays message that informs user of failed attempt\n2. User may retry, return to normal flow at step 5   Includes: -   Priority: High   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.1    - -     Use Case ID: 3.1   Use Case Name: Receive Singapore Crisis Status Summary Report   Created By: -   Last Updated By: -   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Prime Minister\u0026rsquo;s Office   Description: Allow Prime Minister\u0026rsquo;s Office to receive crisis status summary report every 30 minutes   Trigger: Check ever 30 minutes   Preconditions: -   Postconditions: Prime Minister\u0026rsquo;s Office has received crisis status summary report   Normal Flow: 1. API Service System checks whether 30 minutes have elapsed since last report\n2. API Service System generates crisis status summary report\n3. API Service System stores crisis status summary report into database\n4. API Service System sends crisis status summary report to Prime Minister\u0026rsquo;s Office through Notification System   Alternative Flows: -   Exceptions: 1a. 30 minutes have not elapsed\n1. Wait 5 minutes and check again   Includes: -   Priority: High   Frequency of Use: High (every 30 minutes)   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.2    - -     Use Case ID: 3.2   Use Case Name: Receive Crisis Intervention Request via SMS   Created By: -   Last Updated By: -   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Emergency Agencies   Description: Allow emergency agencies to receive crisis intervention request via SMS   Trigger: Assistance is requested   Preconditions: -   Postconditions: Emergency agencies have received SMS   Normal Flow: 1. Notification System sends SMS to emergency agencies   Alternative Flows: -   Exceptions: -   Includes: -   Priority: High   Frequency of Use: Low (when assistance is requested)   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.3    - -     Use Case ID: 3.3   Use Case Name: Receive Civil Defence Shelter Locations From Facebook and Twitter   Created By: -   Last Updated By: -   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Public User   Description: Allow Public User to see latest civil defence shelter locations on Facebook and Twitter   Trigger: Check 2 hours   Preconditions: -   Postconditions: Latest civil defence shelter locations have been posted on Facebook and Twitter   Normal Flow: 1. API Service System checks whether 2 hours have elapsed since last update\n2. API Service System fetches latest civil defence shelter locations\n3. API Service System posts latest civil defence shelter locations to Facebook and Twitter through Notification System   Alternative Flows: -   Exceptions: 1a. 2 hours have not elapsed\n1. Wait 20 minutes and check again   Includes: -   Priority: Medium   Frequency of Use: High (every 2 hours)   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    "
},
{
	"uri": "/lab-1/functional-requirements/",
	"title": "Functional Requirements",
	"tags": [],
	"description": "",
	"content": " Web Client System 1. Web Client System must be able to display real-time status update on a map of Singapore. 1.1. Web Client System must be able to fetch weather conditions. 1.2. Web Client System must be able to fetch dengue hotspot information. 1.3. Web Client System must be able to fetch haze information. 1.4. Web Client System must be able to display fetched information on a map of Singapore. 2. Web Client System must display phone number for crisis report. 3. Web Users must be able to report crisis using Crisis Report Form. 3.1. Web Users must be able to see the Incident Report Form in the Crisis Report Page. 3.2. Web Users must be able to fill in the Crisis Report Form. 3.2.1. Web Users must provide their name. 3.2.2. Web Users must provide their contact number. 3.2.3. Web Users must provide the location of the crisis. 3.2.4. Web Users must be able to see nearby crisis reported on the same day upon entering location. 3.2.5. Web Users must provide the type of assistance required, i.e. emergency ambulance, rescue and evacuation, fire-fighting and gas leak control. 3.3. Web Users must be able to submit Crisis Report Form. 3.3.1. Web Users must be able to see a success message when submit succeeds. 3.3.2. Web Users must be able to see a failure message when submit fails. 4. Call Center Operators must be able to login. 4.1. Call Center Operators must provide their username. 4.2. Call Center Operators must provide their password. 5. Call Center Operators must be able to input information received from calls. 5.1. Call Center Operators must be able to login using username and password. 5.2. Call Center Operators must be able to fill in the Crisis Report Form. 5.2.1. Call Center Operators must provide the name. 5.2.2. Call Center Operators must provide the contact number. 5.2.3. Call Center Operators must provide the location of the crisis. 5.2.4. Call Center Operators must be able to see nearby crisis reported on the same day upon entering location. 5.2.5. Call Center Operators must provide the type of assistance required, i.e. emergency ambulance, rescue and evacuation, fire-fighting and gas leak control. 5.3. Call Center Operators must be able to submit Crisis Report Form. 5.3.1. Call Center Operators must be able to see a success message when submit succeeds. 5.3.2. Call Center Operators must be able to see a failure message when submit fails. 6. Admin User must be able to login. 6.1. Admin User must provide their username. 6.2. Admin User must provide their password. 7. Admin User must be able to make changes to the system (**rephrase) 7.1. Admin User must be able to update crisis type. 7.2. Admin User must be able to update assistance type. 7.3. Admin User must be able to update social media account. 7.4. Admin User must be able to update phone number of emergency agencies. 7.5. Admin User must be able to update Email address of Prime Minister's Office.  API Service System 6. API Service System must be able to provide a real-time status update of Singapore. 6.1. API Service must be able to provide the weather conditions. 6.2. API Service must be able to provide dengue hotspots as coordinates. 6.3. API Service must be able to provide haze information as numeric values. 7. API Service System must be able to process crisis report. 7.1. API Service System must be able to store crisis report into database. 8. API Service System must be able to generate crisis status summary report every 30 minutes. 9. API Service System must be able to provide civil defence shelter locations. 9.1. API Service System must be able to fetch civil defence shelter locations.  Notification System 10. Notification System must be able to send crisis status summary report to Prime Minister’s Office via Email. 11. Notification System must be able to post civil defence shelter locations to Facebook and Twitter. 12. Notification System must be able to send SMS to emergency agencies.  "
},
{
	"uri": "/lab-1/non-functional-requirements/",
	"title": "Non-functional Requirements",
	"tags": [],
	"description": "",
	"content": " Choose from flexibility, maintainability, performance, reusability, robustness, reliability, security or\u0026hellip;\nFlexibility  Easy to add new crisis type Easy to add assistance type Easy to update credentials such as social media account, Prime Minister\u0026rsquo;s Office Email, emergency agents\u0026rsquo; numbers\u0026hellip; Add more?  "
},
{
	"uri": "/lab-1/analysis-models/",
	"title": "Analysis Models",
	"tags": [],
	"description": "",
	"content": " Data Flow Diagram TODO\nEntity-Relationship Diagram (ER Diagram) TODO\nDialog Map TODO\nDecision Tables TODO\n"
},
{
	"uri": "/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "© 2018 Dean\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "Contributors",
	"content": "TODO\n"
},
{
	"uri": "/",
	"title": "Documentation | Dean&#39;s Crisis Management System",
	"tags": [],
	"description": "",
	"content": " Dean\u0026rsquo;s Crisis Management System Project for CZ3003.\nProud to present by Dean\u0026rsquo;s Team.\nView on GitHub\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]